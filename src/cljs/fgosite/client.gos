// -*- mode: go -*-
package client

import macros hiccups   "hiccups/core"
import(
        _ "hiccups/runtime"
	"fgosite/code"
)

const jQuery = \`js/jQuery`

func<hiccups.defhtml> myTemplate() {
	[DIV.CONTAINER,
		[DIV.ROW,
			[DIV.COL_MD_4,
				[TEXTAREA#FGO.FORM_CONTROL, {ROWS: 10},
					code.Tour[0][1]
				]
			],
			[DIV.COL_MD_4,
				[PRE#CLJ,
					"Clojure code goes here"
				]
			],
			[DIV.COL_MD_4,
				[H1, "A Tour of Functional Go"],
				[P, "Functional Go is a sugar coating of Go syntax around a creamy Clojure/JVM/JavaScript center"],
				[P, "See ",
					[A, {HREF: "https://github.com/eobrain/funcgo#funcgo"}, "Github page"],
					" for how to get started using the language."]
			]
		],
		[DIV.ROW,
			[DIV#ERR.ALERT.ALERT_WARNING]
		]
	]
}


func ajaxPut(url, data, success) {
	jQuery->ajax(jsObj(
		"type",    "PUT",
		"url",     url,
		"data",    data,
		"success", success
	))
}

func ajaxGet(url, success, error) {
	jQuery->ajax(jsObj(
		"url",     url,
		"success", success,
		"error",    error
	))
}

func startsWith(string, prefix) {
	string->lastIndexOf(prefix, 0) == 0
}

func core(fgoElem, cljElem, errElem) {
	func getClj() {
		const(
			fgoText = fgoElem->val()
			prefix  = "/"  str  js.md5(fgoText)
		)
		ajaxGet(
			prefix  str "/clj",
			func(cljText){
				if cljText startsWith "Parse error" {
					errElem->html(cljText)
					errElem->slideDown()
				} else {
					cljElem->html(cljText)
					errElem->slideUp()
					errElem->html("")
				}
			},
			func(){
				ajaxPut(prefix  str  "/fgo", fgoText, getClj)
			}
		)
	}

	fgoElem->keyup(getClj)
	getClj()
}

jQuery(func(){
	const(
		insertHere = jQuery("#insert-here")
	)
	insertHere->html(myTemplate())
	core(jQuery("#fgo"), jQuery("#clj"), jQuery("#err"))
})

