// -*- mode: go -*-
package client

import macros hiccups	"hiccups/core"
import(
	_ "hiccups/runtime"
	"fgosite/code"
)

// This is the equivalent of the $ variable in JavaSccript JQuery
const jQ = \`js/jQuery`

// Use the Hiccups templating language to create HTML in the structure
// that Bootstrap needs.
func<hiccups.defhtml> pageTemplate(index) {
	const pg = code.Tour[index]
	[DIV.CONTAINER,
		// Title at top of page
		[DIV.PAGE_HEADER,
			[H1, "Functional Go ", [SMALL, "Clojure for the rest of us"]]
		],
		// Back and Forward buttons to navigate through the tour
		[DIV.ROW, [DIV.COL_MD_12,
			[UL.PAGER,
				if 0 < index {
					[LI.PREVIOUS, [A#PREV, {HREF: "#"}, "&larr; Previous"]]
				},
				if index < count(code.Tour) - 1 {
					[LI.NEXT,     [A#NEXT, {HREF: "#"}, "Next &rarr;"]]
				}
			]
		]],
		[DIV.ROW,
			// Main code area
			[DIV.COL_MD_6,
				[TEXTAREA#FGO.FORM_CONTROL, {ROWS: 10}]
			],
			// Main description area (filled in from description in code.go)
			DESCRIPTION(pg)
		],
		// Display any fgo compile errors.
		[DIV.ROW, [DIV#ERR.COL_MD_12.ALERT.ALERT_WARNING]],
		// Link to original Go tour.
		[DIV.ROW, [DIV#ERR.COL_MD_12,

			[P, "Compare to ", [A, {HREF:
		"http://tour.golang.org/#" str NUM(pg)},
		"corresponding Go code"], " on a Tour of Go"]

		]],
		// Display generated Clojure, and result of evaluating it.
		[DIV.ROW,
			[DIV.COL_MD_6, [PRE#CLJ]],
			[DIV.COL_MD_6,
				[PRE#OUT]
			]
		],
		// Control to toggle between Clojure and ClojureScript
		[DIV.ROW, [DIV.COL_MD_6,
			[UL.NAV.NAV_PILLS.NAV_JUSTIFIED,
				[LI.ACTIVE, [A#JVM, {HREF: "#"}, "JVM"]],
				[LI,	    [A#JS,  {HREF: "#"}, "JavaScript"]]
			]
		]]
	]
 }

// HTTP PUT of the data to the URL, calling back the success function when done
func ajaxPut(url, data, success) {
	jQ->ajax(jsObj(
		"type",	   "PUT",
		"url",	   url,
		"data",	   data,
		"success", success
	))
}

// HTTP GET of the URL, calling back either the success or the error function
func ajaxGet(url, success, error) {
	jQ->ajax(jsObj(
		"url",	   url,
		"success", success,
		"error",   error
	))
}

func startsWith(string, prefix) {
	string->lastIndexOf(prefix, 0) == 0
}

// Resize the #fgo textbox in proportion to its content.
func resizeFgo() {
	const (
		fgo = jQ("#fgo")
		charCount = fgo->html()->_length
	)
	fgo->height(2 * charCount  min	jQ(js.window)->height() / 3)
}

// Get the Clojure code parsed from some this Functional go text
func getClj(index, fgoText) {
	const(
		// Determine which of the JVM/JS buttons is selected.
		isJvm = jQ("#jvm")->parent()->hasClass("active")
		filename = if isJvm {"main.go"} else {"main.gos"}
		// Use an MD5 hash to create an index.
		prefix	= "/"  str  js.md5(filename  str  fgoText)
	)
	resizeFgo()
	jQ("#out")->html("")
	// First try getting the Clojure, assuming the Functional Go
	// was sent to the server in a previous request.
	ajaxGet(
		prefix	str  "/clj",
		// If fgoText was previously sent, than handled the returned CLojure text.
		func(cljText){
			if cljText startsWith "ERROR " {
				jQ("#err")->html(cljText)
				jQ("#err")->slideDown()
			} else {
				jQ("#clj")->html(cljText)
				jQ("#err")->slideUp()
				jQ("#err")->html("")
				jQ("#out")->slideDown()
				if isJvm {
					ajaxGet(
						prefix	str "/eval",
						func{ jQ("#out")->html($1) },
						func{ jQ("#out")->html("EVAL FAILED") }
					)
				} else {
					jQ("#out")->slideUp()
				}
			}
		},
		// If fgoText was not previously sent, then send it to the server.
		func(){
			ajaxPut(str(prefix, "/fgo/", filename),
				fgoText,
				// Having sent it to the server,
				// recursively call this function.
				// This constitutes an asynchronous
				// retry loop.
				func{getClj(index, fgoText)}
			)
		}
	)
}


// Write the Functional
func handleFgo(index, fgoText) {
	jQ("#fgo")->html(fgoText)
	jQ("#fgo")->keyup(func{getClj(index, jQ("#fgo")->val())})
	jQ("#prev")->click(func{useTemplate(index - 1)})
	jQ("#next")->click(func{useTemplate(index + 1)})
	getClj(index, fgoText)
}

func core(index) {
	// Get the Functional Go text for the current page and process it.
	ajaxGet(str("/tour_code/tour", NUM(code.Tour[index]), "/main.go"),
		// If code successfully returned pass it along to handleFgo
		func{ handleFgo(index, $1) },
		// On error, pass placeholder text to handleFgo
		func{ handleFgo(index, "(((Insert Code Here)))") }
	)
}

func useTemplate(index) {
	// Expand the template
	jQ("#insert-here")->html(pageTemplate(index))

	// Call the core code immediateley, and also later when either
	// of the JVM or JS buttons are clicked.
	core(index)
	jQ("#jvm")->click(func(){
		jQ("#jvm")->parent()->addClass("active")
		jQ("#js")->parent()->removeClass("active")
		core(index)
	})
	jQ("#js")->click(func(){
		jQ("#jvm")->parent()->removeClass("active")
		jQ("#js")->parent()->addClass("active")
		core(index)
	})
}

// Entry point. When everything is loaded display the first page.
jQ(func(){
	useTemplate(0)
})
