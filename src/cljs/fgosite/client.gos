// -*- mode: go -*-
package client

import macros hiccups   "hiccups/core"
import(
        _ "hiccups/runtime"
	"fgosite/code"
)

const jQ = \`js/jQuery`

func<hiccups.defhtml> pageTemplate(index) {
	const pg = code.Tour[index]
	[DIV.CONTAINER,
		[DIV.PAGE_HEADER,
			[H1, "Functional Go ", [SMALL, "Clojure for the rest of us"]]
		],
		[DIV.ROW, [DIV.COL_MD_12,
			[UL.PAGER,
				if 0 < index {
					[LI.PREVIOUS, [A#PREV, {HREF: "#"}, "&larr; Previous"]]
				},
				if index < count(code.Tour) - 1 {
					[LI.NEXT,     [A#NEXT, {HREF: "#"}, "Next &rarr;"]]
				}
			]
		]],
		[DIV.ROW,
			[DIV.COL_MD_4,
				[TEXTAREA#FGO.FORM_CONTROL, {ROWS: 10},	FGO(pg)]
			],
			[DIV.COL_MD_4, [PRE#CLJ]],
			DESCRIPTION(pg)
		],
		[DIV.ROW, [DIV#ERR.COL_MD_12.ALERT.ALERT_WARNING]],
		[DIV.ROW, [DIV#ERR.COL_MD_12,

			[P, "Compare to ", [A, {HREF:
		"http://tour.golang.org/#" str NUM(pg)},
		"corresponding Go code"], " on a Tour of Go"]

		]],
		[DIV.ROW, [DIV.COL_MD_12,
			[UL.NAV.NAV_PILLS.NAV_JUSTIFIED,
				[LI.ACTIVE, [A#JVM, {HREF: "#"}, "JVM"]],
				[LI,        [A#JS,  {HREF: "#"}, "JavaScript"]]
			]
		]],
		[DIV.ROW, [DIV.COL_MD_12,
			[PRE#OUT]
		]]
	]
 }


func ajaxPut(url, data, success) {
	jQ->ajax(jsObj(
		"type",    "PUT",
		"url",     url,
		"data",    data,
		"success", success
	))
}

func ajaxGet(url, success, error) {
	jQ->ajax(jsObj(
		"url",     url,
		"success", success,
		"error",    error
	))
}

func startsWith(string, prefix) {
	string->lastIndexOf(prefix, 0) == 0
}

func core(index) {
	func getClj() {
		const(
			fgoText = jQ("#fgo")->val()
			isJvm = jQ("#jvm")->parent()->hasClass("active")
			filename = if isJvm {"main.go"} else {"main.gos"}
			prefix  = "/"  str  js.md5(filename  str  fgoText)
		)
		jQ("#out")->html("")
		ajaxGet(
			prefix  str "/clj",
			func(cljText){
				// js.console->log("cljText=", cljText)
				println("cljText=", cljText)
				if cljText startsWith "ERROR " {
					jQ("#err")->html(cljText)
					jQ("#err")->slideDown()
				} else {
					jQ("#clj")->html(cljText)
					jQ("#err")->slideUp()
					jQ("#err")->html("")
					jQ("#out")->slideDown()
					if isJvm {
						ajaxGet(
							prefix  str "/eval",
							func{ jQ("#out")->html($1) },
							func{ jQ("#out")->html("EVAL FAILED") }
						)
					} else {
						jQ("#out")->slideUp()
					}
				}
			},
			func(){
				ajaxPut(str(prefix, "/fgo/", filename), fgoText, getClj)
			}
		)
	}

	jQ("#fgo")->keyup(getClj)
	jQ("#prev")->click(func{useTemplate(index - 1)})
	jQ("#next")->click(func{useTemplate(index + 1)})
	getClj()
}

func useTemplate(index) {
	jQ("#insert-here")->html(pageTemplate(index))
	core(index)
	jQ("#jvm")->click(func(){
		
		jQ("#jvm")->parent()->addClass("active")
		jQ("#js")->parent()->removeClass("active")
		core(index)
	})
	jQ("#js")->click(func(){
		jQ("#jvm")->parent()->removeClass("active")
		jQ("#js")->parent()->addClass("active")
		core(index)
	})
}

jQ(func(){
	useTemplate(0)
})

mutateEnableConsolePrint()
