// -*- mode: go -*-
package code


type page struct {num; description}

func newPage(num, header, paras...) {
	new page(
		num,
		vec([DIV.COL_MD_6, [H1, header]]  concat  paras)
	)
}

var Tour = [

	newPage(1, "A Tour of Functional Go",

		[P, "Functional Go is a sugar coating of Go syntax
		around a creamy Clojure/JVM/JavaScript center"],

		[P, "See ", [A, {HREF:
		"https://github.com/eobrain/funcgo#funcgo"}, "Github
		page"], " for how to get started using the
		language."],

		[P, "This tour is inspired by, and reuses many of the
		code examples and some text from, ", [A, {HREF:
		"http://tour.golang.org"}, `"A Tour of Go"`], ".  You
		can follow the links under the code here to compare
		our Functional Go code with the corresponding Go
		code."],

		[P, "The tour is interactive. Feel free to modify the
		Functional Go code to immediately see how the
		generated Clojure code changes."],

		[P, "These example programs demonstrate different
		aspects of Go. The programs in the tour are meant to
		be starting points for your own experimentation."],

		[P, `When you're ready to move on, Click the "Next"
		button on the top of the page.`]

	),

	newPage(3, "How this Tour was built.",

		[P, "This tour is built using Functional Go, including
		a server component running on Google App Engine and a
		client component that is compiled to JavaScript"]

	),

	newPage(4, "Packages",

		[P, `Every Go program is made up of packages.`],

		[P, `Programs start running in package main.`],

		[P, `This program is using the packages with import
		paths "fmt" and "math/rand".`],

		[P, `By convention, the package name is the same as
		the last element of the import path. For instance, the
		"math/rand" package comprises files that begin with
		the statement package rand.`]
	),

	newPage(15, "Type conversions"),

	newPage(16, "Constants",

		[P, "In Funcgo, unlike in Go, the const declaration
		must be at the beginning of its scope, which is why we
		need the extra level of curly braces around the last
		two statements here."]

	),

	newPage(22, "If",

		[P,"The if statement looks as it does in C or Java,
		except that the ( ) are gone and the { } are
		required. "]

	),

	newPage(23, "23"),
	newPage(25, "25"),
	newPage(26, "26"),
	newPage(31, "31"),
	newPage(40, "40"),
	newPage(47, "47"),
	newPage(65, "65")
]
